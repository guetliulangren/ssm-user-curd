<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">
<!-- 不扫描controller注解 -->
<context:component-scan base-package="com">

    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>

</context:component-scan>
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 数据源配置 -->
	<bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
	</bean>
	<!-- 定义一个sessionFactory工厂并扫描maper.xml文件-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"   value="classpath:Mybatis-config.xml"/>
		<property name="dataSource"  ref="DataSource"/>
		<property name="mapperLocations"  value="classpath:mapper/*.xml"/>	
	</bean>
	<!--  扫面DAO的所有实现-->
	<bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage"  value="com.lgm.dao"/>
	</bean>
   <!-- 定义一个可批量插入sqlsession -->
   <bean  id="sqlsession"  class="org.mybatis.spring.SqlSessionTemplate">
   
   <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
   <constructor-arg  name="executorType"   value="BATCH"/>
   </bean>
	<!--JDBC事务管理器,根据你的情况使用不同的事务管理器-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="DataSource"  />
	</bean> 
	<!-- 切入表达式*后面要有空格 -->
	<aop:config>
	<aop:pointcut expression="execution(* com.service..*(..))" id="txpoint"/>
	<aop:advisor advice-ref="advice"   pointcut-ref="txpoint"/>
	</aop:config>
	<!--  事物控制,拦截所有所定义有以下开头的方法-->
	<tx:advice id="advice"   transaction-manager="transactionManager" >
	<tx:attributes>
	<tx:method name="insert*"   propagation="REQUIRED"   rollback-for="Exception"/>
	<tx:method name="update*"    propagation="REQUIRED"  rollback-for="Exception"/>
	<tx:method name="insert*"    propagation="REQUIRED"  rollback-for="Exception"/>
	<tx:method name="get*"  read-only="true"/>
	<tx:method name="*"   propagation="SUPPORTS" rollback-for="Exception"/>
	</tx:attributes>
	</tx:advice>
	
	<!--  shiro配置文件-->
	
      <!--
        3.配置shiro过滤器
        3.1) id必须和web.xml中配置的shiroFilter filterName一致.
    -->
  <context:component-scan base-package="com.shiro" />
     
 <bean  id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" >
        <property name="securityManager" ref="securityManager"/>
         <property name="loginUrl" value="/index2.jsp"/>
        <property name="successUrl" value="/my2.jsp"/>
        <property name="unauthorizedUrl" value="/error.jsp"/> 
        <!--
	            配置需要受保护的页面
	               以及访问这些页面需要的权限
	      1) anon可以匿名访问的页面
	      2) authc 必须认证(登录)后才可以访问的页面
	        -->
        <property name="filterChainDefinitions">
            <value>
                <!--加载静态资源-->
                /asset/** = anon
                /user/longin= anon
                /index2.jsp = anon
                
                /logout = logout
                <!--除以上配置外，其他请求全部必须认证-->
                /** = authc
            </value>
        </property>
    </bean>
    <!--Shiro配置-->

   <!--1.配置SecurityManager-->
    <bean class="org.apache.shiro.web.mgt.DefaultWebSecurityManager" id="securityManager">
     <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="shiro1" />
                 <!--配置自定义Realm-->
                 <!--shiro1使用扫描器扫描注册成功了-->
               
            </list>
        </property> 
    </bean>
    <!--
        2.配置realm
        2.1) 使用实现了org.apache.shiro.realm.Realm接口的realm
    -->
    <bean class="org.apache.shiro.authc.pam.ModularRealmAuthenticator" id="authenticator">
      <property name="realms">
            <list>
                <ref bean="shiro1" />
               
            </list>
        </property> 
    </bean>
 <!-- 生命周期 -->
 <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


<!-- 启用shiro注解 -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
     <property name="securityManager" ref="securityManager"/>
  </bean>
  
  

    <bean class="com.shiro.Shiro1" id="shiro1">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean> 

  
</beans>